#!/bin/bash

# Deploy the containers for the tcp-java service into the ECS cluster
# This script does NOT wait until the deployed containers (api and db) are actually RUNNING
# Pushes the latest local tcp-java-api image to ECR.
#
# Assumes it is run in the ECS service subdirectory (where the ECS docker-compose.yml is);
# assumes credentials are already set up in the default aws profile;
# assumes name of cluster to deploy to is in SSM key "/dev/cluster-name";
# sets the default ecs-cli cluster to that cluster.

# Fail on any error; unset variables are errors; show commands before executing:
set -eux

# TODO: see if logging anything from this script would be helpful

# TODO: make sure we're in the correct directory (with ECS docker-compose.yml in it)
# Can just check for Dockerfile, and cd .. if not there

date

echo "Running in $PWD"

aws --version
ecs-cli --version

IMAGE=$(grep "image: .*amazonaws.com/" docker-compose.yml | sed "s/^[^\/]*\///")
echo "Image from docker-compose.yml is $IMAGE"

echo "Pushing image $IMAGE to ECR..."
ecs-cli push --aws-profile default $IMAGE:latest

aws_region=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed "s/[a-z]$//")

cluster_name=$(aws ssm get-parameter --region $aws_region --name "/dev/cluster-name" --query "Parameter.Value" --out text)

echo "Configuring the default ECS cluster for ecs-cli to $cluster_name in region $aws_region..."
ecs-cli configure --cluster $cluster_name --region $aws_region --default-launch-type EC2

echo "Checking current state of service..."
(ecs-cli compose --aws-profile default service ps ||:) | tee service-status

# Remember: failed grep returns an error (1)

# States not in { RUNNING, STOPPED } include { PENDING }
state=OTHER

# If ANY are RUNNING, state is ACTIVE
if ( grep -q RUNNING service-status ) ; then
    state=ACTIVE
elif  ( grep -q STOPPED service-status ) ; then
    state=INACTIVE
elif  ( grep -q ServiceNotFoundException service-status ) ; then
    state=NONEXISTENT
fi

echo "state is $state"

if [ "$state" == "OTHER" ] ; then
    echo "ERROR: unknown service state; see above.  Quitting...."
    exit 2
fi

# TODO: what about the case where one is RUNNING, the other STOPPED?
# TODO: what about where LOTS are STOPPED, 2 are RUNNING?
#   Right now, we count that as ACTIVE

# Possibilities:
# Has never been deployed: get error status 1, "ServiceNotFoundException" in the output
#  --> go ahead and deploy with "service up"
# Has been deployed, but is stopped: exit status 0, "STOPPED" in the output (2 lines)
#  --> go ahead and deploy with "service up"
# Has been deployed, is RUNNING: exit status 0, "RUNNING" in the output (2 lines)
#  --> need to take it down, wait for draining, then bring it back up

# When you bring it down successfully: exit status 0
# When you bring it down but it's already down: exit status 0
# When you bring it down but it doesn't exist yet: exit status 1
#     FATA[0000] Got an error describing service 'someservice' : 'MISSING'   <-- console
#     time="2019-08-26T13:58:04-04:00" level=fatal msg="Got an error describing service 'someservice' : 'MISSING'"  <-- if you pipe it

# When you bring it up successfully: exit status 0

if [ "$state" == "ACTIVE" ] ; then
   echo "Bringing service down (because current state is $state)..."
   ecs-cli compose --aws-profile default service down
   sleep 20  # give it some time to drain
fi

# If the service was running before, it will take some time (usually < 30 seconds) to drain
echo "Bringing service up..."
counter_limit=10
counter=$counter_limit
until ( ecs-cli compose --aws-profile default service up ) ; do
    counter=$((counter - 1))
    if (( counter <= 0 )); then
        echo "ERROR: Could not bring service up after $counter_limit attempts.  Quitting..."
        date
        exit 3
    fi
    sleep 5
done;

echo "Checking state of service..."
ecs-cli compose --aws-profile default service ps

# TODO: wait around until at least two things are RUNNING

date
